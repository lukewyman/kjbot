openapi: 3.1.0
info:
  title: KJBot song-library API
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  /healthz:
    get:
      summary: Liveness probe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [ok] }
  /readyz:
    get:
      summary: Readiness probe
      responses:
        '200':
          description: Ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [ready] }
        '503':
          description: Not Ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /songs:
    post:
      summary: Create a song
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SongCreate' }
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of created resource
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Song' }
        '400': { $ref: '#/components/responses/ValidationError' }
        '409': { $ref: '#/components/responses/ConflictError' }
    get:
      summary: List songs
      parameters:
        - { name: q, in: query, schema: { type: string } }
        - { name: page, in: query, schema: { type: integer, minimum: 1, default: 1 } }
        - { name: limit, in: query, schema: { type: integer, minimum: 1, maximum: 100, default: 25 } }
        - { name: sort, in: query, schema: { type: string, enum: [title, artist, created_at, updated_at, duration] } }
        - { name: order, in: query, schema: { type: string, enum: [asc, desc] } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SongList' }
  /songs/{song_id}:
    parameters:
      - name: song_id
        in: path
        required: true
        schema: { type: string, format: uuid }
    get:
      summary: Get song by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Song' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      summary: Update song
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SongUpdate' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Song' }
        '400': { $ref: '#/components/responses/ValidationError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '409': { $ref: '#/components/responses/ConflictError' }
    delete:
      summary: Delete song
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFoundError' }
components:
  schemas:
    MediaRef:
      type: object
      required: [bucket, key]
      properties:
        bucket: { type: string, minLength: 1, maxLength: 200 }
        key: { type: string, minLength: 1, maxLength: 1024 }
    Song:
      type: object
      required: [song_id, title, artist, duration, media_file, created_at, updated_at]
      properties:
        song_id: { type: string, format: uuid }
        title: { type: string, minLength: 1, maxLength: 200 }
        artist: { type: string, minLength: 1, maxLength: 200 }
        duration: { type: integer, minimum: 0, maximum: 86400 }
        media_file: { $ref: '#/components/schemas/MediaRef' }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    SongCreate:
      type: object
      required: [title, artist, duration, media_file]
      properties:
        title: { type: string, minLength: 1, maxLength: 200 }
        artist: { type: string, minLength: 1, maxLength: 200 }
        duration: { type: integer, minimum: 0, maximum: 86400 }
        media_file: { $ref: '#/components/schemas/MediaRef' }
    SongUpdate:
      type: object
      properties:
        title: { type: string, minLength: 1, maxLength: 200 }
        artist: { type: string, minLength: 1, maxLength: 200 }
        duration: { type: integer, minimum: 0, maximum: 86400 }
        media_file: { $ref: '#/components/schemas/MediaRef' }
    SongList:
      type: object
      required: [items, page, limit, total, has_next]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Song' }
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        has_next: { type: boolean }
    Error:
      type: object
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object }
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ConflictError:
      description: Conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

          